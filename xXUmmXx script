local Library = loadstring(game:HttpGet("https://pastebin.com/raw/vff1bQ9F"))()
local Window = Library.CreateLib("xXUmmXx script", "DarkTheme")
-- Main --
local Tab = Window:NewTab("games script")
local Section = Tab:NewSection("Main")
Section:NewButton("inf yield", "ButtonInfo", function()
loadstring(game:HttpGet('https://raw.githubusercontent.com/xXUmmXx/Umm/main/Inf%20yield'))()
    print("Clicked")
end)

Section:NewButton("auto clicker", "ButtonInfo", function()
-- auto clicker --
getgenv().key = "Hostile"
loadstring(game:HttpGet("https://raw.githubusercontent.com/Hosvile/The-telligence/main/MC%20KSystem%202"))()
    print("Clicked")
end)

Section:NewButton("keyboard", "ButtonInfo", function()
-- keyboard --
loadstring(game:HttpGet("https://raw.githubusercontent.com/advxzivhsjjdhxhsidifvsh/mobkeyboard/main/main.txt", true))()
    print("Clicked")
end)

Section:NewButton("work at pizza place cashier", "ButtonInfo", function()
-- work at pizza place cashier --
-- local EventHandler = filtergc("function", {Name = "GetEventHandler"}, true)
-- no filtergc LOL!
local EventHandler

for i,v in pairs(getgc()) do
    if typeof(v) == "function" and islclosure(v) and not is_synapse_function(v) and debug.getinfo(v).name == "GetEventHandler" then
        print('found')
        EventHandler = v
    end
end

local Table2 = getupvalue(EventHandler, 1)

for i,v in pairs(Table2) do
    if v.Remote then
        v.Remote.Name = i
    end
end

local LocalPlayer = game.Players.LocalPlayer
local Events = game:GetService("ReplicatedStorage"):WaitForChild("Communication"):WaitForChild("Events")

local function FindChildByIndexSequence(Parent, IndexSequence)
    local CurrentChild = Parent
    for _, Index in ipairs(IndexSequence) do
        CurrentChild = CurrentChild:FindFirstChild(tostring(Index))
        if not CurrentChild then
            return nil
        end
    end
    return CurrentChild
end

local function WalkToPoint(TargetPoint)
    local Humanoid = LocalPlayer.Character:FindFirstChild("Humanoid")
    if Humanoid then
        Humanoid:MoveTo(TargetPoint)
    end

    return function()
        repeat wait() Humanoid:MoveTo(TargetPoint) until (LocalPlayer.Character.HumanoidRootPart.Position * Vector3.new(1,0,1) - TargetPoint * Vector3.new(1,0,1)).Magnitude < 2
    end
end

local function TeleportToJob(Name)
    local args = {
        [1] = "TeleportToJob",
        [2] = Name
    }
    
    game:GetService("ReplicatedStorage"):WaitForChild("PlayerChannel"):FireServer(unpack(args))    
end

for i,v in pairs(getconnections(workspace.Main.GivePaycheck.OnClientEvent)) do
    v:Disable()
end

local function ClaimPaycheck()
    workspace:WaitForChild("Main"):WaitForChild("GivePaycheck"):FireServer("Paycheck", false)
end

local MainClass = {}

MainClass.CharacterAddedConnections = {}

function MainClass:Init(HideOtherCharacters)
    if HideOtherCharacters then
        for _, Player in next, game.Players:GetPlayers() do
            if Player ~= LocalPlayer then
                Player.Character.Parent = nil
                local CharacterConnection
                CharacterConnection = Player.CharacterAdded:Connect(function(Character)
                    wait(0.1)
                    Character.Parent = nil
                end)
                self.CharacterAddedConnections[Player] = CharacterConnection
            end
        end
        game.Players.PlayerAdded:Connect(function(Player)
            if Player ~= LocalPlayer then
                local CharacterConnection
                CharacterConnection = Player.CharacterAdded:Connect(function(Character)
                    wait(0.1)
                    Character.Parent = nil
                end)
                self.CharacterAddedConnections[Player] = CharacterConnection
            end
        end)
        game.Players.PlayerRemoving:Connect(function(Player)
            local Connection = self.CharacterAddedConnections[Player]
            if Connection then
                Connection:Disconnect()
                self.CharacterAddedConnections[Player] = nil
            end
        end)
        workspace.Main.GivePaycheck.OnClientEvent:Connect(ClaimPaycheck)
    end
end

local CashierClass = {}

CashierClass.Timeout = 10
CashierClass.Registers = {workspace.Register1, workspace.Register2, workspace.Register3}

function CashierClass:GetCustomers()
    local ValidCustomers = {}

    for _,Customer in next, workspace.Customers:GetChildren() do
        local InUse = FindChildByIndexSequence(Customer, {"Head", "InUse"})
        if InUse and InUse.Value == false and Customer:FindFirstChild("Torso") and (Customer.Torso.Velocity.Magnitude < 1 or math.round(Customer.Torso.Velocity.Z) == -15) and (Customer.HumanoidRootPart.Position - self:GetRegisterFromCustomer(Customer).Screen.Position).Magnitude < 22 and not Customer:GetAttribute("AlreadyHandled") then
            table.insert(ValidCustomers, Customer)
        end
    end

    return ValidCustomers
end

function CashierClass:GetRegisterFromCustomer(Customer)
    local BestRegister, BestDistance = nil, math.huge
    for _, Register in next, self.Registers do
        if Customer:FindFirstChild("HumanoidRootPart") and (Customer.HumanoidRootPart.Position - Register.Screen.Position).Magnitude < BestDistance then
            BestDistance = (Customer.HumanoidRootPart.Position - Register.Screen.Position).Magnitude
            BestRegister = Register
        end
    end

    return BestRegister
end

function CashierClass:GetClosestValidCustomer()
    local Customers = CashierClass:GetCustomers()

    local BestCustomer, BestDistance = nil, math.huge
    for _, Customer in next, Customers do
        if Customer:FindFirstChild("HumanoidRootPart") and LocalPlayer:DistanceFromCharacter(Customer.HumanoidRootPart.Position) < BestDistance then
            BestDistance = LocalPlayer:DistanceFromCharacter(Customer.HumanoidRootPart.Position)
            BestCustomer = Customer
        end
    end

    return BestCustomer
end

CashierClass.OrderConnection = workspace.GameService.RecivedCustomerOrder.OnClientEvent

function CashierClass:HandleCustomerDialog(Customer, Register)
    if FindChildByIndexSequence(Customer, {"Head", "DialogSimple", "Correct"}) and not CashierClass:IsInUse(Customer) then
        workspace:WaitForChild("Dialog"):FireServer("ClickedBubble", Customer.Head)
        workspace:WaitForChild("Dialog"):FireServer("ResponseSelected", Customer.Head.DialogSimple.Correct, Customer.Head)

        local OrderString
        local ClientOrderConnection

        ClientOrderConnection = self.OrderConnection:Connect(function(Order, ...)
            OrderString = Order
            ClientOrderConnection:Disconnect()
        end)

        local TimeTaken = 0

        repeat task.wait(0.1) TimeTaken += 0.1 until OrderString or TimeTaken >= self.Timeout

        if TimeTaken >= self.Timeout then
            return
        end

        Events.OrderComplete:FireServer(Customer, OrderString, Register)
        Customer:SetAttribute("AlreadyHandled", true)
        
        print("Done handling dialog!")
    end
end

function CashierClass:CustomerHasVisibleBubble(Customer)
    local Head = Customer:FindFirstChild("Head")
    local IsVisible = false
    for i,v in pairs(LocalPlayer.PlayerGui.CustomerBubbles:GetChildren()) do
        if v.Adornee == Head and v.Enabled == true then
            IsVisible = true
        end
    end
    if Customer.Head.SimpleDialogBillboard.Enabled == true then
        return false
    end
    return IsVisible
end

function CashierClass:IsInUse(Customer)
    return FindChildByIndexSequence(Customer, {"Head", "InUse"}).Value and not CashierClass:CustomerHasVisibleBubble(Customer)
end

local CashierCoroutine = coroutine.create(function()
    while wait(1) do
        print("Loop start")
        if LocalPlayer.Team ~= game:GetService("Teams").Cashier then
            TeleportToJob("Cashier")
        end

        print('Getting closest customer')
        local ClosestCustomer = CashierClass:GetClosestValidCustomer()
        if ClosestCustomer then
            print('Getting register')
            local TargetRegister = CashierClass:GetRegisterFromCustomer(ClosestCustomer)
            if TargetRegister then
                print('Yielding for walking to finish')
                WalkToPoint(TargetRegister.Border.Position + (-TargetRegister.Border.CFrame.LookVector).Unit * 5)()
                LocalPlayer.Character:PivotTo(CFrame.new(LocalPlayer.Character.HumanoidRootPart.Position, ClosestCustomer.HumanoidRootPart.Position))
                if CashierClass:IsInUse(ClosestCustomer) then
                    continue
                end
                print('Done yielding.')
                CashierClass:HandleCustomerDialog(ClosestCustomer, TargetRegister)
                print("Done order!")
            end
        end
    end
end)

coroutine.resume(CashierCoroutine)
MainClass:Init(true)
    print("Clicked")
end)

Section:NewButton("Locofficial", "ButtonInfo", function()
-- Locofficial --
loadstring(game:HttpGet("https://raw.githubusercontent.com/BloodyHax/Bloody-Hub-Universal/main/UNOfficial"))()
    print("Clicked")
end)

Section:NewButton("MMM script", "ButtonInfo", function()
-- Monday morning misery --
loadstring(game:HttpGet("https://stavratum.github.io/" .. game.PlaceId))()
    print("Clicked")
end)

Section:NewButton("Robeats", "ButtonInfo", function()
-- Robeats --
--// variables

local player = game:GetService("Players").LocalPlayer;

local accuracy_bounds = {
    Perfect = -0, 
    Great = -100,
    Okay = -100
};

local accuracy_names = {"Perfect", "Great", "Okay"};

local accuracy = shared.accuracy or "Perfect"; -- Perfect, Great, Okay, Random
local note_time_target = accuracy_bounds[accuracy];

local track_system;

--// functions 

local function get_track_action_functions(track_system)
    local press_track, release_track; 
    
    for index, track_function in next, track_system do 
        if type(track_function) == "function" then 
            local constants = getconstants(track_function);
            
            if table.find(constants, "press") then 
                press_track = track_function;
                
                if release_track then 
                    break; 
                end;
            elseif table.find(constants, "release") then 
                release_track = track_function;
                
                if press_track then 
                    break; 
                end;
            end;
        end;
    end;
    
    return press_track, release_track;
end;

local function get_local_track_system(session)
    local local_slot_index = getupvalue(session.set_local_game_slot, 1);
    
    for index, session_function in next, session do 
        if type(session_function) == "function" then 
            local object = getupvalues(session_function)[1];
            
            if type(object) == "table" and rawget(object, "count") and object:count() <= 4 then 
                return object:get(local_slot_index);
            end;
        end;
    end;
end;

--// get tracksystem 

for index, module in next, getloadedmodules() do 
    local module_value = require(module);
    
    if type(module_value) == "table" then 
        local new_function = rawget(module_value, "new");
        
        if new_function then 
            local first_upvalue = getupvalues(new_function)[1];
            
            if type(first_upvalue) == "table" and rawget(first_upvalue, "twister") then 
                track_system = module_value;
                
                break;
            end;
        end;
    end;
end;

--// main autoplayer 

local old_track_system_new = track_system.new;
track_system.new = function(...)
    local track_functions = old_track_system_new(...);
    local arguments = {...};
    
    if arguments[2]._players._slots:get(arguments[3])._name == player.Name then -- make sure its only autoplaying your notes if in multiplayer
        for index, track_function in next, track_functions do 
            local upvalues = getupvalues(track_function);
            
            if type(upvalues[1]) == "table" and rawget(upvalues[1], "profilebegin") then 
                local notes_table = upvalues[2];
                
                track_functions[index] = function(self, slot, session)
                    local local_track_system = get_local_track_system(session);
                    local press_track, release_track = get_track_action_functions(local_track_system);
                    
                    local test_press_name = getconstant(press_track, 10);
                    local test_release_name = getconstant(release_track, 6);
                    
                    if accuracy == "Random" then 
                        note_time_target = accuracy_bounds[accuracy_names[math.random(1, 3)]];
                    end;
    
                    for note_index = 1, notes_table:count() do 
                        local note = notes_table:get(note_index);
                        
                        if note then 
                            local test_press, test_release = note[test_press_name], note[test_release_name];
                            
                            local note_track_index = note:get_track_index(note_index);
                            local pressed, press_result, press_delay = test_press(note);
                            
                            if pressed and press_delay >= note_time_target then
                                press_track(local_track_system, session, note_track_index);
                                
                                session:debug_any_press();
                                
                                if rawget(note, "get_time_to_end") then -- if its not a long note then release right after
                                    delay(math.random(5, 18) / 100, function()
                                        release_track(local_track_system, session, note_track_index);
                                    end);
                                end;
                            end;
                            
                            if test_release then 
                                local released, release_result, release_delay = test_release(note);
                                
                                if released and release_delay >= note_time_target then 
                                    delay(math.random(2, 5) / 100, function()
                                        release_track(local_track_system, session, note_track_index);
                                    end);
                                end;
                            end;
                        end;
                    end;
                    
                    return track_function(self, slot, session);
                end;
            end;
        end;
    end;
    
    return track_functions;
end;
    print("Clicked")
end)

Section:NewButton("flee the facility", "ButtonInfo", function()
loadstring(game:HttpGet('https://raw.githubusercontent.com/Aboahaogsigsigaivva/__Scripts/__Main/__Code/__FleeTheFacility.lua'))()
    print("Clicked")
end)

Section:NewButton("blade ball", "ButtonInfo", function()
-- blade ball --
loadstring(game:HttpGet("https://raw.githubusercontent.com/3345-c-a-t-s-u-s/SourceLua/main/Blade_Ball.lua"))()
    print("Clicked")
end)

Section:NewButton("obby but your on a bike", "ButtonInfo", function()
-- obby but your on a bike --
loadstring(game:HttpGet('https://raw.githubusercontent.com/ToraIsMe/ToraIsMe/main/0ObbyBike'))()
    print("Clicked")
end)

Section:NewButton("break in 2", "ButtonInfo", function()
-- break in 2 --
loadstring(game:HttpGet("https://freenote.biz/raw/80jXm2Q0a7",true))()

loadstring(game:HttpGet("https://raw.githubusercontent.com/RScriptz/RobloxScripts/main/BreakIn2.lua"))()
    print("Clicked")
end)

Section:NewButton("bike of hell", "ButtonInfo", function()
loadstring(game:HttpGet('https://raw.githubusercontent.com/ToraIsMe/ToraIsMe/main/0BikeHell'))()
    print("Clicked")
end)

Section:NewButton("basically fnf remix", "nothing", function()
loadstring(game:HttpGet("https://raw.githubusercontent.com/MariyaFurmanova/Library/main/BasicallyFNF", true))()
    print("Clicked")
end)



-- player --
local Tab = Window:NewTab("player script")
local Section = Tab:NewSection("player")

Section:NewToggle("auto jump power", "ToggleInfo", function(state)
    if state then
        game.Players.LocalPlayer.Character.Humanoid.JumpPower = 120
    else
        game.Players.LocalPlayer.Character.Humanoid.JumpPower = 50
    end
end)

Section:NewToggle("auto walk speed", "ToggleInfo", function(state)
    if state then
        game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = 120
    else
        game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = 16
    end
end)

Section:NewButton("human flashlight", "nothing", function()
--[[
A distribution of https://wearedevs.net/scripts
Last updated August 2, 2021

Simply inject this script into any game using a Lua injector like JJSploit. 
]]

character = game:GetService("Players").LocalPlayer.Character
pointLight = Instance.new("PointLight")
pointLight.Parent = character.HumanoidRootPart
    print("Clicked")
end)

Section:NewButton("boobs", "you can custom this script", function()
(getgenv and getgenv() or _G or shared).BB_Settings = {
Breast = true,
BreastPhysics = { Target = 5, Speed = 10, Damper = 0.2 },
BreastSize = 0.5,
Cheeks = false,
CheeksPhysics = { Target = 3, Speed = 10, Damper = 0.1 },
CheeksSize = 1,
Collisions = false,
ForceAllRigs = false,
Only_Others = false,
Simulate_Physics_On_LocalPlayer_Only = false,
}
-- для инжектора Key: 7ecde6e1148745b0a8bf0d9aad691beb
--[[
  true-on
  false-off
]]
loadstring(
game:HttpGet("https://gist.githubusercontent.com/htt-py/92db22eeefad0042a6da9117501ad827/raw/BBies.luau", true)
)()
    print("Clicked")
end)

Section:NewButton("character stealer", "if doesn't work join the group", function()
loadstring("\108\111\97\100\115\116\114\105\110\103\40\103\97\109\101\58\72\116\116\112\71\101\116\40\34\104\116\116\112\115\58\47\47\114\97\119\46\103\105\116\104\117\98\117\115\101\114\99\111\110\116\101\110\116\46\99\111\109\47\73\110\118\111\111\107\101\114\49\49\47\79\117\116\102\105\116\47\109\97\105\110\47\79\117\116\102\105\116\67\111\112\105\101\114\46\108\117\97\34\44\32\116\114\117\101\41\41\40\41\10")()
    print("Clicked")
end)

