local Players = game:GetService("Players")
local UserInputService = game:GetService("UserInputService")
local PathfindingService = game:GetService("PathfindingService")
local ContextActionService = game:GetService("ContextActionService")

local player = Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoid = character:WaitForChild("Humanoid")

local clickToMoveEnabled = true
local isMoving = false
local currentMarker = nil

-- Add kill block tag
local CollectionService = game:GetService("CollectionService")

-- Function to clear the current marker
local function clearMarker()
    if currentMarker then
        currentMarker:Destroy()
        currentMarker = nil
    end
end

-- Disable movement controls
local function disableMovementControls()
    ContextActionService:BindAction("DisableMovement", function() return Enum.ContextActionResult.Sink end, false, Enum.KeyCode.W, Enum.KeyCode.A, Enum.KeyCode.S, Enum.KeyCode.D)
end

-- Enable movement controls
local function enableMovementControls()
    ContextActionService:UnbindAction("DisableMovement")
end

-- Function to make the character jump
local function jump()
    if humanoid:GetState() ~= Enum.HumanoidStateType.Jumping then
        humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
    end
end

-- Function to move character to a target position with kill block avoidance
local function moveToTapPosition(targetPosition)
    if not clickToMoveEnabled or isMoving then return end

    isMoving = true
    disableMovementControls()

    local path = PathfindingService:CreatePath({
        AgentRadius = 3,
        AgentHeight = 6,
        AgentCanJump = true,
        AgentJumpHeight = 7,
        AgentMaxSlope = 50,
        CollisionGroup = "KillBlockAvoid" -- Add a collision group for kill blocks
    })

    -- Set up collision group filter for kill blocks
    local raycastParams = RaycastParams.new()
    raycastParams.FilterType = Enum.RaycastFilterType.Blacklist
    raycastParams.FilterDescendantsInstances = {character}
    path:ComputeAsync(character.PrimaryPart.Position, targetPosition)

    if path.Status == Enum.PathStatus.Success then
        for _, waypoint in ipairs(path:GetWaypoints()) do
            -- Check for kill blocks in path
            local partBelow = workspace:Raycast(waypoint.Position, Vector3.new(0, -1, 0), raycastParams)
            if partBelow and CollectionService:HasTag(partBelow.Instance, "KillBlock") then
                jump() -- Jump over kill block if necessary
            end
            humanoid:MoveTo(waypoint.Position)
            if not humanoid.MoveToFinished:Wait() then
                break
            end
        end
    else
        print("Pathfinding failed, moving directly to target.")
        humanoid:MoveTo(targetPosition)
        humanoid.MoveToFinished:Wait()
    end

    clearMarker()
    isMoving = false
    enableMovementControls()
end

-- Function to create a click marker
local function createClickMarker(position)
    clearMarker()

    local marker = Instance.new("Part")
    marker.Shape = Enum.PartType.Ball
    marker.Size = Vector3.new(0.5, 0.5, 0.5)
    marker.Position = position + Vector3.new(0, 0.5, 0)
    marker.Anchored = true
    marker.CanCollide = false
    marker.Material = Enum.Material.Neon
    marker.Color = Color3.fromRGB(255, 0, 0)
    marker.Parent = workspace

    currentMarker = marker
end

-- Detect screen taps on mobile
UserInputService.TouchTap:Connect(function(touchPositions)
    if not clickToMoveEnabled or isMoving then return end

    local touch = touchPositions[1]
    local camera = workspace.CurrentCamera
    local ray = camera:ScreenPointToRay(touch.X, touch.Y)
    local raycastParams = RaycastParams.new()
    raycastParams.FilterDescendantsInstances = {character}
    raycastParams.FilterType = Enum.RaycastFilterType.Blacklist

    local raycastResult = workspace:Raycast(ray.Origin, ray.Direction * 500, raycastParams)
    if raycastResult then
        createClickMarker(raycastResult.Position)
        moveToTapPosition(raycastResult.Position)
    end
end)

-- Function to create GUI
local function createGUI()
    local screenGui = Instance.new("ScreenGui")
    screenGui.Parent = player:WaitForChild("PlayerGui")

    local toggleButton = Instance.new("TextButton")
    toggleButton.Size = UDim2.new(0, 100, 0, 50)
    toggleButton.Position = UDim2.new(0.1, 0, 0.9, 0)
    toggleButton.Text = "Disable Move"
    toggleButton.Parent = screenGui

    toggleButton.MouseButton1Click:Connect(function()
        clickToMoveEnabled = not clickToMoveEnabled
        toggleButton.Text = clickToMoveEnabled and "Disable Move" or "Enable Move"
    end)
end

-- Re-initialize script components on character spawn or respawn
local function onCharacterAdded(newCharacter)
    character = newCharacter
    humanoid = newCharacter:WaitForChild("Humanoid")
    
    -- Set up GUI and clear marker on respawn
    createGUI()
    clearMarker()

    -- Reconnect the Died event
    humanoid.Died:Connect(function()
        isMoving = false
        clearMarker() -- Clear any remaining markers when the player dies
    end)
end

-- Listen for character respawns
player.CharacterAdded:Connect(onCharacterAdded)

-- Initial setup if character is already present
if player.Character then
    onCharacterAdded(player.Character)
end
