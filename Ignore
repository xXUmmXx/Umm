local Players = game:GetService("Players")
local UserInputService = game:GetService("UserInputService")
local PathfindingService = game:GetService("PathfindingService")
local ContextActionService = game:GetService("ContextActionService")

local player = Players.LocalPlayer
local humanoid = nil -- Initialize humanoid

local clickToMoveEnabled = true
local isMoving = false -- Track if the character is currently moving
local currentMarker = nil -- Store the current marker

-- Disable movement controls
local function disableMovementControls()
    ContextActionService:BindAction("DisableMovement", function() return Enum.ContextActionResult.Sink end, false, Enum.KeyCode.W, Enum.KeyCode.A, Enum.KeyCode.S, Enum.KeyCode.D)
end

-- Enable movement controls
local function enableMovementControls()
    ContextActionService:UnbindAction("DisableMovement")
end

-- Retry pathfinding with slight adjustments if it fails
local function attemptPathRetry(path, targetPosition)
    local retries = 3 -- Number of retries allowed
    for i = 1, retries do
        path:ComputeAsync(player.Character.PrimaryPart.Position, targetPosition)
        if path.Status == Enum.PathStatus.Success then
            return true
        end
        wait(0.2) -- Small delay before retrying
    end
    return false
end

-- Function to move character to a target position
local function moveToTapPosition(targetPosition)
    if not clickToMoveEnabled or isMoving then return end

    isMoving = true
    disableMovementControls()

    local path = PathfindingService:CreatePath({
        AgentRadius = 3,       -- Increased for more obstacle avoidance
        AgentHeight = 6,
        AgentCanJump = true,
        AgentJumpHeight = 7,   -- Increased jump height to handle more obstacles
        AgentMaxSlope = 50     -- More slope tolerance for uneven terrain
    })

    if not attemptPathRetry(path, targetPosition) then
        print("Pathfinding failed after retries.")
        enableMovementControls()
        isMoving = false
        return
    end

    for _, waypoint in ipairs(path:GetWaypoints()) do
        humanoid:MoveTo(waypoint.Position)
        local reached = humanoid.MoveToFinished:Wait()
        
        -- Check for obstacles and re-compute path if blocked
        if not reached then
            print("Path obstructed, recalculating...")
            if not attemptPathRetry(path, targetPosition) then
                print("Failed to find an alternative path.")
                enableMovementControls()
                isMoving = false
                return
            end
        end
    end

    if currentMarker then
        currentMarker:Destroy()
        currentMarker = nil
    end

    isMoving = false
    enableMovementControls()
end

-- Function to create a click marker
local function createClickMarker(position)
    if currentMarker then
        currentMarker:Destroy()
    end

    local marker = Instance.new("Part")
    marker.Shape = Enum.PartType.Ball
    marker.Size = Vector3.new(0.5, 0.5, 0.5)
    marker.Position = position + Vector3.new(0, 0.5, 0)
    marker.Anchored = true
    marker.CanCollide = false
    marker.Material = Enum.Material.Neon
    marker.Color = Color3.fromRGB(255, 0, 0)
    marker.Parent = workspace

    currentMarker = marker
end

-- Detect screen taps on mobile
UserInputService.TouchTap:Connect(function(touchPositions)
    if not clickToMoveEnabled or isMoving then return end

    local touch = touchPositions[1]
    local camera = workspace.CurrentCamera
    local ray = camera:ScreenPointToRay(touch.X, touch.Y)
    local raycastParams = RaycastParams.new()
    raycastParams.FilterDescendantsInstances = {player.Character}
    raycastParams.FilterType = Enum.RaycastFilterType.Blacklist

    local raycastResult = workspace:Raycast(ray.Origin, ray.Direction * 500, raycastParams)
    if raycastResult then
        createClickMarker(raycastResult.Position)
        moveToTapPosition(raycastResult.Position)
    end
end)

-- Function to create GUI
local function createGUI()
    local screenGui = Instance.new("ScreenGui")
    screenGui.Parent = player:WaitForChild("PlayerGui")

    local toggleButton = Instance.new("TextButton")
    toggleButton.Size = UDim2.new(0, 100, 0, 50)
    toggleButton.Position = UDim2.new(0.1, 0, 0.9, 0)
    toggleButton.Text = "Disable Move"
    toggleButton.Parent = screenGui

    toggleButton.MouseButton1Click:Connect(function()
        clickToMoveEnabled = not clickToMoveEnabled
        toggleButton.Text = clickToMoveEnabled and "Disable Move" or "Enable Move"
    end)
end

-- Setup character and GUI on player spawn
player.CharacterAdded:Connect(function(character)
    humanoid = character:WaitForChild("Humanoid")
    createGUI()
end)

-- Initial GUI setup if the character is already present
if player.Character then
    humanoid = player.Character:WaitForChild("Humanoid")
end

createGUI()
